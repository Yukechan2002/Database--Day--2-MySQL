Database Schema for Guvi Zen Class

Entities:

1. Students:
- student_id (Primary Key)
- name
- email
- phone_number

2. Instructors:
- instructor_id (Primary Key)
- name
- email
- phone_number

3. Courses:
- course_id (Primary Key)
- title
- description
- instructor_id (Foreign Key)

4. Class Sessions:
- session_id (Primary Key)
- course_id (Foreign Key)
- date
- time
- duration

5. Assignments:
- assignment_id (Primary Key)
- course_id (Foreign Key)
- title
- description
- due_date

6. Grades:
- grade_id (Primary Key)
- student_id (Foreign Key)
- assignment_id (Foreign Key)
- grade

7. Attendance:
- attendance_id (Primary Key)
- session_id (Foreign Key)
- student_id (Foreign Key)
- status

8. CodeKata:
- kata_id (Primary Key)
- title
- description
- difficulty_level

9. Topics:
- topic_id (Primary Key)
- course_id (Foreign Key)
- title
- description

10. Tasks:
- task_id (Primary Key)
- course_id (Foreign Key)
- title
- description
- due_date

11. Company Drives:
- drive_id (Primary Key)
- company_name
- date
- time
- location
- eligibility_criteria

Relationships:

- One-to-Many relationship between Instructors and Courses.
- One-to-Many relationship between Courses and Class Sessions.
- One-to-Many relationship between Courses and Assignments.
- One-to-Many relationship between Students and Grades.
- One-to-Many relationship between Assignments and Grades.
- One-to-Many relationship between Class Sessions and Attendance.
- One-to-Many relationship between Students and Attendance.
- One-to-Many relationship between Courses and Topics.
- One-to-Many relationship between Courses and Tasks.
- One-to-Many relationship between Courses and Company Drives.
- Many-to-Many relationship between Students and CodeKata through CodeKata Grades.
- One-to-Many relationship between CodeKata and CodeKata Grades.
- One-to-Many relationship between Courses and Feedback.
- One-to-Many relationship between Courses and Certificates.
- One-to-Many relationship between Students and Payments.
- One-to-Many relationship between Courses and Discussions.
- One-to-Many relationship between Courses and Project Teams.
- One-to-Many relationship between Students and User Role Assignments.
- One-to-Many relationship between Instructors and User Role Assignments.
- One-to-Many relationship between Courses and Course Materials.
- One-to-Many relationship between Courses and Course Ratings.



DataBase Schema

-- Instructors Table
CREATE TABLE Instructors (
    instructor_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(20)
);

-- Students Table
CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(20)
);

-- Courses Table
CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    description TEXT,
    instructor_id INT,
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);

-- Class Sessions Table
CREATE TABLE Class_Sessions (
    session_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    date DATE,
    time TIME,
    duration INT,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Assignments Table
CREATE TABLE Assignments (
    assignment_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    title VARCHAR(100),
    description TEXT,
    due_date DATE,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Grades Table
CREATE TABLE Grades (
    grade_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    assignment_id INT,
    grade FLOAT,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (assignment_id) REFERENCES Assignments(assignment_id)
);

-- Attendance Table
CREATE TABLE Attendance (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    session_id INT,
    student_id INT,
    status VARCHAR(10),
    FOREIGN KEY (session_id) REFERENCES Class_Sessions(session_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- CodeKata Table
CREATE TABLE CodeKata (
    kata_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    description TEXT,
    difficulty_level VARCHAR(20)
);

-- Topics Table
CREATE TABLE Topics (
    topic_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    title VARCHAR(100),
    description TEXT,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Tasks Table
CREATE TABLE Tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    title VARCHAR(100),
    description TEXT,
    due_date DATE,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Company Drives Table
CREATE TABLE Company_Drives (
    drive_id INT AUTO_INCREMENT PRIMARY KEY,
    company_name VARCHAR(100),
    date DATE,
    time TIME,
    location VARCHAR(100),
    eligibility_criteria TEXT
);

-- Feedback Table
CREATE TABLE Feedback (
    feedback_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    student_id INT,
    feedback TEXT,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- Certificates Table
CREATE TABLE Certificates (
    certificate_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    student_id INT,
    issue_date DATE,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- Payments Table
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    amount DECIMAL(10, 2),
    payment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- Discussions Table
CREATE TABLE Discussions (
    discussion_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    student_id INT,
    topic VARCHAR(100),
    message TEXT,
    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- Project Teams Table
CREATE TABLE Project_Teams (
    team_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    team_name VARCHAR(100),
    project_description TEXT,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- User Roles Table (for admin, instructor, student roles)
CREATE TABLE User_Roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE
);

-- User Role Assignments Table
CREATE TABLE User_Role_Assignments (
    assignment_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    role_id INT,
    FOREIGN KEY (user_id) REFERENCES Students(student_id),
    FOREIGN KEY (role_id) REFERENCES User_Roles(role_id)
);

-- Course Materials Table (for storing documents, slides, etc.)
CREATE TABLE Course_Materials (
    material_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    material_name VARCHAR(100),
    material_type VARCHAR(50),
    material_url VARCHAR(255),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Course Ratings Table
CREATE TABLE Course_Ratings (
    rating_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT,
    student_id INT,
    rating FLOAT,
    review TEXT,
    rating_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

-- User Table (for general user information, if needed)
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,
    password VARCHAR(255),
    email VARCHAR(100),
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Inserting Dummy Values

-- Inserting Dummy Values into Instructors Table
INSERT INTO Instructors (name, email, phone_number) VALUES
('John Doe', 'john@example.com', '123-456-7890'),
('Jane Smith', 'jane@example.com', '987-654-3210');

-- Inserting Dummy Values into Students Table
INSERT INTO Students (name, email, phone_number) VALUES
('Alice Johnson', 'alice@example.com', '111-222-3333'),
('Bob Smith', 'bob@example.com', '444-555-6666');

-- Inserting Dummy Values into Courses Table
INSERT INTO Courses (title, description, instructor_id) VALUES
('Introduction to Programming', 'Learn the basics of programming', 1),
('Web Development', 'Build websites using HTML, CSS, and JavaScript', 2);

-- Inserting Dummy Values into Class Sessions Table
INSERT INTO Class_Sessions (course_id, date, time, duration) VALUES
(1, '2024-05-20', '10:00:00', 90),
(2, '2024-05-22', '14:00:00', 120);

-- Inserting Dummy Values into Assignments Table
INSERT INTO Assignments (course_id, title, description, due_date) VALUES
(1, 'Assignment 1', 'Complete programming exercises', '2024-05-25'),
(2, 'Project 1', 'Develop a basic website', '2024-05-30');

-- Inserting Dummy Values into Grades Table
INSERT INTO Grades (student_id, assignment_id, grade) VALUES
(1, 1, 85),
(2, 2, 90);

-- Inserting Dummy Values into Attendance Table
INSERT INTO Attendance (session_id, student_id, status) VALUES
(1, 1, 'Present'),
(1, 2, 'Absent'),
(2, 1, 'Present'),
(2, 2, 'Present');

-- Inserting Dummy Values into CodeKata Table
INSERT INTO CodeKata (title, description, difficulty_level) VALUES
('Kata 1', 'Lorem ipsum dolor sit amet', 'Easy'),
('Kata 2', 'Consectetur adipiscing elit', 'Medium');

-- Inserting Dummy Values into Topics Table
INSERT INTO Topics (course_id, title, description) VALUES
(1, 'Variables and Data Types', 'Introduction to variables and data types'),
(1, 'Control Flow', 'Learn about if statements and loops');

-- Inserting Dummy Values into Tasks Table
INSERT INTO Tasks (course_id, title, description, due_date) VALUES
(2, 'Task 1', 'Complete HTML exercises', '2024-05-25'),
(2, 'Task 2', 'Style website with CSS', '2024-06-01');

-- Inserting Dummy Values into Company Drives Table
INSERT INTO Company_Drives (company_name, date, time, location, eligibility_criteria) VALUES
('XYZ Corp', '2024-06-15', '09:00:00', 'Virtual', 'Open to all students'),
('ABC Inc', '2024-07-01', '10:00:00', 'Onsite', 'Final year students only');


-- Inserting Dummy Values into Feedback Table
INSERT INTO Feedback (course_id, student_id, feedback) VALUES
(1, 1, 'Great course! Really learned a lot.'),
(2, 2, 'The web development course was very informative.');

-- Inserting Dummy Values into Certificates Table
INSERT INTO Certificates (course_id, student_id, issue_date) VALUES
(1, 1, '2024-06-01'),
(2, 2, '2024-06-05');

-- Inserting Dummy Values into Payments Table
INSERT INTO Payments (student_id, amount, payment_date) VALUES
(1, 99.99, '2024-05-28'),
(2, 149.99, '2024-06-10');

-- Inserting Dummy Values into Discussions Table
INSERT INTO Discussions (course_id, student_id, topic, message) VALUES
(1, 1, 'Variables', 'I have a question about variable scopes.'),
(2, 2, 'CSS Styling', 'Anyone have tips for responsive design?');

-- Inserting Dummy Values into Project Teams Table
INSERT INTO Project_Teams (course_id, team_name, project_description) VALUES
(1, 'Team A', 'Developing a basic calculator application.'),
(2, 'Team B', 'Creating a portfolio website.');

-- Inserting Dummy Values into User Role Assignments Table
INSERT INTO User_Role_Assignments (user_id, role_id) VALUES
(1, 3), -- Student role
(2, 2); -- Instructor role

-- Inserting Dummy Values into Course Materials Table
INSERT INTO Course_Materials (course_id, material_name, material_type, material_url) VALUES
(1, 'Introduction Slides', 'Slide', 'https://example.com/intro_slides.pdf'),
(2, 'HTML Basics', 'Document', 'https://example.com/html_basics.doc');

-- Inserting Dummy Values into Course Ratings Table
INSERT INTO Course_Ratings (course_id, student_id, rating, review) VALUES
(1, 1, 4.5, 'Excellent course content.'),
(2, 2, 4.0, 'Good explanations but some topics could be more detailed.');

-- Inserting Dummy Values into Users Table
INSERT INTO Users (username, password, email) VALUES
('alice_student', 'password123', 'alice@example.com'),
('john_instructor', 'securepwd456', 'john@example.com');
